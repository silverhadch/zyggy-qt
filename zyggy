#!/usr/bin/env python3

import sys
import subprocess
from PyQt6.QtWidgets import (
    QApplication, QMainWindow, QComboBox, QToolBar, QPushButton, QTableView,
    QVBoxLayout, QWidget, QHeaderView, QMessageBox
)
from PyQt6.QtGui import QStandardItemModel, QStandardItem, QAction
from PyQt6.QtCore import Qt

DATASETS = 0
SNAPSHOTS = 1
VOLUMES = 2
POOLS = 3


def has_zfs():
    result = subprocess.run(["which", "zfs"], capture_output=True)
    return result.stdout.strip() != b''


class ZFSApp(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Zyggy - ZFS Administration GUI")
        self.resize(800, 600)

        self.table = QTableView()
        self.model = QStandardItemModel()
        self.table.setModel(self.model)
        self.table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)

        self.cmb_mode = QComboBox()
        self.cmb_mode.addItems(["Datasets", "Snapshots", "Volumes", "Pools"])
        self.cmb_mode.setCurrentIndex(DATASETS)
        self.cmb_mode.currentIndexChanged.connect(self.on_mode_change)

        self.toolbar = QToolBar("ZFS Toolbar")
        self.addToolBar(self.toolbar)

        self.btn_refresh = self.add_toolbar_button("‚ü≥", "Refresh", self.update_table)
        self.btn_new = self.add_toolbar_button("Ôºã", "New", self.on_new_click)
        self.btn_rename = self.add_toolbar_button("‚úé", "Rename", self.on_rename_click)
        self.btn_copy = self.add_toolbar_button("‚ßâ", "Copy", self.on_copy_click)
        self.btn_up = self.add_toolbar_button("‚áß", "Promote", self.on_up_click)
        self.btn_delete = self.add_toolbar_button("üóë", "Delete", self.on_delete_click)
        self.btn_undo = self.add_toolbar_button("‚Ü∂", "Rollback", self.on_undo_click)
        self.btn_properties = self.add_toolbar_button("‚Ñπ", "Properties", self.on_properties_click)
        self.btn_about = self.add_toolbar_button("‚ùì", "About", self.on_about_click)

        self.toolbar.addWidget(self.cmb_mode)

        layout = QVBoxLayout()
        layout.addWidget(self.table)

        container = QWidget()
        container.setLayout(layout)
        self.setCentralWidget(container)

        self.update_table()

    def add_toolbar_button(self, label, tooltip, slot):
        btn = QPushButton(label)
        btn.setToolTip(tooltip)
        btn.clicked.connect(slot)
        self.toolbar.addWidget(btn)
        return btn

    def update_table(self):
        mode = self.cmb_mode.currentIndex()
        if mode == DATASETS:
            cmd = ["zfs", "list", "-o", "name,used,avail,volsize,mountpoint", "-t", "filesystem"]
        elif mode == SNAPSHOTS:
            cmd = ["zfs", "list", "-o", "name,used,avail,volsize,mountpoint", "-t", "snapshot"]
        elif mode == VOLUMES:
            cmd = ["zfs", "list", "-o", "name,used,avail,volsize,mountpoint", "-t", "volume"]
        elif mode == POOLS:
            cmd = ["zpool", "list", "-o", "name,alloc,free,size,health"]
        else:
            return

        result = subprocess.run(cmd, capture_output=True)
        output = result.stdout.decode()
        error = result.stderr.decode()

        if error and "no datasets available" not in error:
            QMessageBox.critical(self, "Error", error)
            return

        lines = output.strip().splitlines()
        if not lines:
            return

        headers = lines[0].split()
        self.model.clear()
        self.model.setHorizontalHeaderLabels(headers)

        for line in lines[1:]:
            items = [QStandardItem(value) for value in line.split()]
            self.model.appendRow(items)

    def on_mode_change(self):
        self.update_table()
        # Update button sensitivity if needed (left out for brevity)

    def on_new_click(self):
        print("New clicked")

    def on_rename_click(self):
        print("Rename clicked")

    def on_copy_click(self):
        print("Copy clicked")

    def on_up_click(self):
        print("Promote clicked")

    def on_undo_click(self):
        print("Rollback clicked")

    def on_delete_click(self):
        print("Delete clicked")

    def on_properties_click(self):
        print("Properties clicked")

    def on_about_click(self):
        QMessageBox.information(self, "About", "Zyggy\nZFS GUI for Linux\nRewritten in PyQt6.")


if __name__ == "__main__":
    if not has_zfs():
        print("zfs not found on system. Exiting.")
        sys.exit(1)

    app = QApplication(sys.argv)
    win = ZFSApp()
    win.show()
    sys.exit(app.exec())
